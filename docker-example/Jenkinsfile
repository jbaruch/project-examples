pipeline {
  agent any
  stages {
    stage('Setup') {
      steps {
        script {
          git url: 'https://github.com/jbaruch/project-examples'
          rtServer = Artifactory.server ARTIFACTORY
          buildInfo = Artifactory.newBuildInfo()
          rtDocker = Artifactory.docker credentialsId: ARTIFACTORY_CREDENTIALS, host: "tcp://127.0.0.1:1234"
          buildInfo.env.capture = true
          scanConfig = [
            'buildName'      : buildInfo.name,
            'buildNumber'    : buildInfo.number
          ]
          sh 'curl -fL https://getcli.jfrog.io | sh'
          print sh script: "sh jfrog rt config --url ${rtServer.url} --user ${rtServer.username} --password ${rtServer.password}", returnStdout: true
        }
      }
    }
    stage('Download dependencies') {
      steps {
        script {
          dir('docker-example') {
            downloadAppSpec = readFile 'appmodules-download.json'
            rtServer.download downloadAppSpec, buildInfo
          }
        }
      }
    }
    stage('Build') {
      steps {
        script {
          dir('docker-example') {
            tagDockerApp = "${rtServer.url.toURL().host}:${DOCKER_PORT}/docker-example:${env.BUILD_NUMBER}"
            docker.build tagDockerApp
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        script {
          rtDocker.push(tagDockerApp, 'docker', buildInfo)
          buildInfo.env.collect()
          rtServer.publishBuildInfo buildInfo
        }
      }
    }
    stage('Xray Scan') {
      steps {
        script {
          scanResult = rtServer.xrayScan scanConfig
          print scanResult
          if(FAIL_ON_XRAY.toBoolean() && scanResult.foundVulnerable) {
            error("Build failed because ${scanResult.scanMessage}")
          }
        }
      }
    }
    stage('Promote'){
      steps {
        script {
          sh "jfrog rt bpr ${$buildInfo.name} ${$buildInfo.number} docker-prod-local"
        }
      }
    }
  }
}
